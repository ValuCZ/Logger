# -*- coding: utf-8 -*-

"""AppFunction implementation"""

from resilient_circuits import AppFunctionComponent, app_function, FunctionResult
from resilient_lib import IntegrationError, validate_fields
import os
from random import randint
import pygal
from resilient_circuits import AppFunctionComponent, app_function, FunctionResult
from resilient_lib import IntegrationError, validate_fields
from arcsight_logger.util.logger import LoggerClient
from arcsight_logger.util.Disposition import Disposition
from datetime import datetime

PACKAGE_NAME = "arcsight_logger"
FN_NAME = "arcsight_logger_chart_data_with_picture"


def extract_data(chart: dict) -> [dict]:
    fields = [field["name"] for field in chart["fields"]]
    ans = []
    for record in chart["results"]:
        parsed_record = {}
        for index, name in enumerate(fields):
            parsed_record[name] = record[index]
        ans.append(parsed_record)
    return ans

def extract_bar(parsed):
    ans = []
    for x in parsed:
        device= ""
        count = 0
        for key in x.keys():
            if "_" in key:
                count = x[key]
            else:
                device += (x[key] + " ")
        ans.append((device, count))
    return ans


class FunctionComponent(AppFunctionComponent):
    """Component that implements function 'arcsight_logger_chart_data_with_picture'"""

    def __init__(self, opts):
        super(FunctionComponent, self).__init__(opts, PACKAGE_NAME)

    @app_function(FN_NAME)
    def _app_function(self, fn_inputs):
        """
         Function: gets statistical data from Logger by query. Json result is returned to message destination and picture is stored in an incidentÂ´s attachement when save image is set to True
         Inputs:
             -   fn_inputs.logger_end_time
             -   fn_inputs.incident_id
             -   fn_inputs.logger_start_time
             -   fn_inputs.logger_graph_type
             -   fn_inputs.logger_query
         """
        self.LOG.debug("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        autogenerated_search_id = int(datetime.utcnow().strftime("%M%S")) + randint(1, 99) * 10000
        self.LOG.debug(str(self.required_app_configs))
        yield self.status_message("Starting App Function: '{0}'".format(FN_NAME))

        validate_fields([{"name": "password"}, {"name": "username"}, {"name": "url"}],
                        self.app_configs)
        validate_fields(["logger_end_time", "incident_id", "logger_start_time", "logger_graph_type",
                         "logger_query"], fn_inputs)
        now = (str(datetime.now().time()) + str(randint(0, 99))).replace(".", "-")  # time object

        soar_client = Disposition(self.rest_client(), "new_artifact")
        client = None
        try:
            client = LoggerClient(self.app_configs.url, self.app_configs.username, self.app_configs.password,
                                  self.rc.execute, self.LOG)
        except Exception as e:
            yield FunctionResult({}, success=False, reason="couldnt establish connection to logger\n" + str(e))
            return
        start_time = fn_inputs.logger_start_time / 1000 + 3600 * 2
        start_time = datetime.utcfromtimestamp(start_time).strftime('%Y-%m-%dT%H:%M:%S.000Z')
        end_time = fn_inputs.logger_end_time / 1000 + 3600 * 2
        end_time = datetime.utcfromtimestamp(end_time).strftime('%Y-%m-%dT%H:%M:%S.000Z')
        self.LOG.debug("\n\n{}    {}\n\n".format(start_time, end_time))
        try:
            client.search(query=fn_inputs.logger_query, search_id=autogenerated_search_id,
                          start_time=start_time, end_time=end_time)
            client.wait(autogenerated_search_id)
        except Exception as e:
            yield FunctionResult({}, success=False, reason="something went wrong with search or query\n" + str(e))
            client.logout()
            return
        try:
            result = client.chart_data(autogenerated_search_id)
            result = extract_data(result)
            parsed_for_bar = extract_bar(result)
            self.LOG.debug(str(result))
        except Exception as e:
            yield FunctionResult({}, success=False,
                                 reason="Couldnt extract data, most likely cuz query is not chartable: " + str(e))
            client.logout()
            return
        try:
            client.logout()
        except:
            pass
        if fn_inputs.logger_graph_type.startswith("bar"):
            name = fn_inputs.logger_graph_type.split(" ")[1]
            self.LOG.debug("||||||||||||||||||||||||||||||||||||||||||||||||||")
            self.LOG.debug(parsed_for_bar)
            bar_chart = pygal.Bar()
            bar_chart.title = fn_inputs.logger_query
            for a in parsed_for_bar:
                bar_chart.add(a[0], a[1])
            now = now + ".svg"
            now = name + now.replace(":", "_")
            bar_chart.render_to_file(now)
            with open(now, "rb") as file:
                bytes = file.read()
                soar_client.new_attachment(now, bytes, incident_id=fn_inputs.incident_id)
            os.remove(now)
        yield self.status_message("Finished running App Function: '{0}'".format(FN_NAME))
        yield FunctionResult({"data":result})
